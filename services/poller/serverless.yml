service: dataplattform-poller

custom:
  stage: ${opt:stage, self:provider.stage}
  project: Dataplattform-${self:custom.stage}
  daily_poller_lambda: ${self:custom.project}-daily_poller
  hourly_poller_lambda: ${self:custom.project}-hourly_poller
  pollingStatusTable: ${self:custom.project}-polling_status
  ingest_apikey: ${ssm:dataplattform_${self:custom.stage}_polling_ingest_apikey}
  insert_apikey: ${ssm:dataplattform_${self:custom.stage}_insert_event_apikey}
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true
  output:
    file: ../integration_tests/poller.serverless_outputs_${self:custom.stage}.json

provider:
  name: aws
  stage: test
  region: eu-central-1
  deploymentBucket:
    name: dataplattform-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: 30
  stackTags:
    Project: ${self:custom.project}
  tags:
    Project: ${self:custom.project}


package:
  individually: true
  exclude:
    - "./**"

functions:
  daily_poller:
    handler: daily_poller.lambda_handler
    module: daily_poller
    name: ${self:custom.daily_poller_lambda}
    description: daily_poller Lambda
    role: dailyPollerRole
    package:
      include:
        - 'daily_poller/*.py'
    environment:
      DATAPLATTFORM_POLLING_STATUS_TABLENAME: ${self:custom.pollingStatusTable}
      DATAPLATTFORM_INGEST_APIKEY: ${self:custom.ingest_apikey}
      DATAPLATTFORM_INGEST_URL:
        'Fn::ImportValue': ${self:custom.project}-ingest-url
      UBW_CLIENT: ${ssm:dataplattform_ubw_client}
      UBW_PASSWORD: ${ssm:dataplattform_ubw_password}
      UBW_TEMPLATE_ID: 2528
      UBW_URL: ${ssm:dataplattform_ubw_url}
      UBW_USERNAME: ${ssm:dataplattform_ubw_username}
      DATAPLATTFORM_YR_LOCATION: 'Norway/Oslo/Oslo/Lakkegata'
      DATAPLATTFORM_TWITTER_CONSUMER_SECRET: ${ssm:dataplattform_twitter_consumer_secret}
      DATAPLATTFORM_TWITTER_CONSUMER_KEY: ${ssm:dataplattform_twitter_consumer_key}
      DATAPLATTFORM_TWITTER_ACCESS_SECRET: ${ssm:dataplattform_twitter_access_secret}
      DATAPLATTFORM_TWITTER_ACCESS_TOKEN: ${ssm:dataplattform_twitter_access_token}
    events:
      - schedule: rate(1 day)

  hourly_poller:
    handler: hourly_poller.handler
    module: hourly_poller
    name: ${self:custom.hourly_poller_lambda}
    description: hourly_poller Lambda
    role: hourlyPollerRole
    package:
      include:
        - 'hourly_poller/*.py'
        - 'hourly_poller/creds.json'
    environment:
      DATAPLATTFORM_INSERT_APIKEY: ${self:custom.insert_apikey}
      DATAPLATTFORM_INSERT_URL:
        'Fn::ImportValue': ${self:custom.project}-insert-event-url
      DATAPLATTFORM_GOOGLE_CALENDAR_IDS: ${ssm:dataplattform_google_calendar_ids}
      DATAPLATTFORM_PUBLISH_EVENT: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.project}-events
      DATAPLATFORM_GOOGLE_CALENDAR_CREDENTIALS: ${ssm:dataplattform_google_calendar_credentials}
    events:
      - schedule: rate(1 hour)

resources:
  Resources:
    dailyPollerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-DailyPollerRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-dynamodbReadOnlyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Scan"
                    - "dynamodb:Query"
                  Resource:
                    - Fn::GetAtt:
                      - PollingStatusTable
                      - Arn

    hourlyPollerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-HourlyPollerRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-snsPublishEventPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sns:Publish"
                    - "sns:ListTopics"
                  Resource: "*"


    PollingStatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.pollingStatusTable}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
  Outputs:
    PollingStatusTableName:
      Description: "The table name for the polling status table."
      Value: ${self:custom.pollingStatusTable}

plugins:
  - serverless-python-requirements
  - serverless-stack-output
  - serverless-pseudo-parameters
