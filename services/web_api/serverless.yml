service: dataplattform-web-api

custom:
  stage: ${opt:stage, self:provider.stage}
  project: Dataplattform-${self:custom.stage}
  web_api_lambda: ${self:custom.project}-web_api

  database_name: Dataplattform
  database_port: 3306
  db:
    prod: db.t2.medium
    dev: db.t2.small
    test: db.t2.small
  securityGroups:
    prod: 'sg-0583a4e1657cfded3' # DATAPLATTFORM-QUICKSIGHT-IRELAND
    dev: 'sg-0b7bf5c0a1440eae6' # ALLOW_TRAVIS_TO_MYSQLAURORA
    test: 'sg-0b7bf5c0a1440eae6' # ALLOW_TRAVIS_TO_MYSQLAURORA
  creds:
    user: admin # TODO Hmm
    password: ${ssm:dataplattform_aurora_${self:custom.stage}_password}
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true

#  output:
#    file: ../integration_tests/structured_mysql.serverless_outputs_${self:custom.stage}.json

provider:
  name: aws
  stage: prod
  region: eu-central-1
  deploymentBucket:
    name: dataplattform-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: 120

  stackTags:
    Project: ${self:custom.project}
  tags:
    Project: ${self:custom.project}

package:
  individually: true
  exclude:
    - "./**"

environment:
    DATAPLATTFORM_AURORA_HOST:
      Fn::GetAtt:
        - auroraCluster
        - Endpoint.Address
    DATAPLATTFORM_AURORA_PORT: ${self:custom.database_port}
    DATAPLATTFORM_AURORA_DB_NAME: ${self:custom.database_name}
    DATAPLATTFORM_AURORA_USER: ${self:custom.creds.user}
    DATAPLATTFORM_AURORA_PASSWORD: ${self:custom.creds.password}
    DATAPLATTFORM_FETCH_APIKEY: ${ssm:dataplattform_${self:custom.stage}_batch_job_apikey}
    DATAPLATTFORM_FETCH_URL:
      'Fn::ImportValue': ${self:custom.project}-get-docs-url
    DATAPLATTFORM_OAUTH_SLACK_TOKEN: ${ssm:dataplattform_slack_event_oauth}
    DATAPLATTFORM_EVENT_CODE_TABLE:
      'Fn::ImportValue': ${self:custom.project}-dynamodb-eventtable-name
    vpc:
      securityGroupIds:
        - sg-2ca58644 # ON-LAN
      subnetIds:
        - subnet-bd8400d5 # ON-LAN1
        - subnet-9a4981e0 # ON-LAN2

functions:
  patch_events:
    handler: events/patch_events.handler
    events:
      - http:
          path: events/*
          method: put
    module: web_api
    name: ${self:custom.web_api_lambda}
    description: Web API for Dataplattform
    role: webAPIRole
    package:
      include:
        - 'api_functions/*.py'
        - 'events/*.py'


resources:
  Resources:
    webAPIRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-WebAPIRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-eventtable-readonly
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource:
                    - 'Fn::ImportValue': ${self:custom.project}-dynamodb-eventtable-arn

  Outputs:
    WebAPIUrl:
      Description: "web_api URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/web_api/"
      Export:
        Name: ${self:custom.project}-web-api-url

plugins:
  - serverless-python-requirements
  - serverless-stack-output
